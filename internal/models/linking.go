// Code generated by GoGM 2.1.1. DO NOT EDIT
package models

import (
	"errors"
)

// LinkToPersonOnFieldParents links Person to Person on the fields Person.Parents and Person.Children
func (l *Person) LinkToPersonOnFieldParents(targets ...*Person) error {
	if targets == nil {
		return errors.New("start and end can not be nil")
	}

	for _, target := range targets {

		if l.Parents == nil {
			l.Parents = make([]*Person, 1)
			l.Parents[0] = target
		} else {
			l.Parents = append(l.Parents, target)
		}

		if target.Children == nil {
			target.Children = make([]*Person, 1)
			target.Children[0] = l
		} else {
			target.Children = append(target.Children, l)
		}
	}

	return nil
}

//UnlinkFromPersonOnFieldParents unlinks Person from Person on the fields Person.Parents and Person.Children
func (l *Person) UnlinkFromPersonOnFieldParents(targets ...*Person) error {
	if targets == nil {
		return errors.New("start and end can not be nil")
	}

	for _, target := range targets {

		if l.Parents != nil {
			for i, unlinkTarget := range l.Parents {
				if unlinkTarget.UUID == target.UUID {
					a := &l.Parents
					(*a)[i] = (*a)[len(*a)-1]
					(*a)[len(*a)-1] = nil
					*a = (*a)[:len(*a)-1]
					break
				}
			}
		}

		if target.Children != nil {
			for i, unlinkTarget := range target.Children {
				if unlinkTarget.UUID == l.UUID {
					a := &target.Children
					(*a)[i] = (*a)[len(*a)-1]
					(*a)[len(*a)-1] = nil
					*a = (*a)[:len(*a)-1]
					break
				}
			}
		}
	}

	return nil
}

// LinkToPersonOnFieldChildren links Person to Person on the fields Person.Children and Person.Parents
func (l *Person) LinkToPersonOnFieldChildren(targets ...*Person) error {
	if targets == nil {
		return errors.New("start and end can not be nil")
	}

	for _, target := range targets {

		if l.Children == nil {
			l.Children = make([]*Person, 1)
			l.Children[0] = target
		} else {
			l.Children = append(l.Children, target)
		}

		if target.Parents == nil {
			target.Parents = make([]*Person, 1)
			target.Parents[0] = l
		} else {
			target.Parents = append(target.Parents, l)
		}
	}

	return nil
}

//UnlinkFromPersonOnFieldChildren unlinks Person from Person on the fields Person.Children and Person.Parents
func (l *Person) UnlinkFromPersonOnFieldChildren(targets ...*Person) error {
	if targets == nil {
		return errors.New("start and end can not be nil")
	}

	for _, target := range targets {

		if l.Children != nil {
			for i, unlinkTarget := range l.Children {
				if unlinkTarget.UUID == target.UUID {
					a := &l.Children
					(*a)[i] = (*a)[len(*a)-1]
					(*a)[len(*a)-1] = nil
					*a = (*a)[:len(*a)-1]
					break
				}
			}
		}

		if target.Parents != nil {
			for i, unlinkTarget := range target.Parents {
				if unlinkTarget.UUID == l.UUID {
					a := &target.Parents
					(*a)[i] = (*a)[len(*a)-1]
					(*a)[len(*a)-1] = nil
					*a = (*a)[:len(*a)-1]
					break
				}
			}
		}
	}

	return nil
}
